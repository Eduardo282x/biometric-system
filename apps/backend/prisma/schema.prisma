// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  name     String
  lastName String
  password String
  role     Role   @default(RECEPCIONISTA)

  payments Payment[] // pagos que este usuario ha registrado
}

enum Role {
  GERENTE
  RECEPCIONISTA
}

model Client {
  id          Int      @id @default(autoincrement())
  name        String
  lastName    String
  identify    String   @unique
  email       String
  phone       String
  address     String
  photo       String? // opcional
  createdDate DateTime @default(now())

  planId Int?
  plan   Plan? @relation(fields: [planId], references: [id])

  payments        Payment[]
  advancePayments AdvancePayment[]
  historyPayments HistoryPayment[]
}

model Plan {
  id          Int      @id @default(autoincrement())
  name        String
  price       Int
  description String
  clients     Client[]
}

model Payment {
  id            Int      @id @default(autoincrement())
  clientId      Int
  client        Client   @relation(fields: [clientId], references: [id])
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  methodPayment String
  amount        Int
  description   String
  datePay       DateTime @default(now())
  nextDatePay   DateTime

  // ayuda a saber si este pago es un abono de un plan mensual
  fromAdvancePaymentId Int?
  fromAdvancePayment   AdvancePayment? @relation(fields: [fromAdvancePaymentId], references: [id])
}

model AdvancePayment {
  id        Int       @id @default(autoincrement())
  clientId  Int
  client    Client    @relation(fields: [clientId], references: [id])
  total     Int
  remaining Int // lo que a√∫n queda por usar
  createdAt DateTime  @default(now())
  payments  Payment[] // pagos mensuales cubiertos con este adelanto
}

model HistoryPayment {
  id            Int      @id @default(autoincrement())
  clientId      Int
  client        Client   @relation(fields: [clientId], references: [id])
  methodPayment String
  amount        Int
  description   String
  datePay       DateTime @default(now())
}
